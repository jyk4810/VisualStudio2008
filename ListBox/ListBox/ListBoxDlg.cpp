
// ListBoxDlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "ListBox.h"
#include "ListBoxDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
END_MESSAGE_MAP()


// CListBoxDlg 대화 상자




CListBoxDlg::CListBoxDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CListBoxDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CListBoxDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CListBoxDlg, CDialog)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	//}}AFX_MSG_MAP
	ON_BN_CLICKED(IDC_BUTTON_RIGHT, &CListBoxDlg::OnBnClickedButtonRight)
	ON_BN_CLICKED(IDC_BUTTON_LEFT, &CListBoxDlg::OnBnClickedButtonLeft)
	ON_LBN_SETFOCUS(IDC_LIST_RIGHT, &CListBoxDlg::OnLbnSetfocusListRight)
	ON_LBN_SETFOCUS(IDC_LIST_LEFT, &CListBoxDlg::OnLbnSetfocusListLeft)
END_MESSAGE_MAP()


// CListBoxDlg 메시지 처리기

BOOL CListBoxDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다. 응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.




	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void CListBoxDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다. 문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CListBoxDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CListBoxDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

BOOL CListBoxDlg::PreTranslateMessage(MSG* pMsg)
{
	if(pMsg->message == WM_KEYDOWN && GetDlgItem(IDC_EDIT_ADD) == GetFocus())
	{
		switch(pMsg->wParam)
		{			
		case VK_RETURN:
			{
				CString strTemp = _T("");
				CString strEmpty = _T("");	
				GetDlgItemText(IDC_EDIT_ADD,strTemp);
				SetDlgItemText(IDC_EDIT_ADD,strEmpty);
				((CListBox*)GetDlgItem(IDC_LIST_LEFT))->AddString(strTemp);				
			}
		default:
			break;
		}
	}

	if(pMsg->message == WM_KEYDOWN)			
	{
		switch(pMsg->wParam)
		{			
		case VK_RETURN:			
			
		case VK_ESCAPE:	
			return TRUE;
		case VK_DELETE:
			{				
				if(LB_ERR == ((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->GetCurSel())
				{
					int nIndex = ((CListBox*)GetDlgItem(IDC_LIST_LEFT))->GetCurSel();
					((CListBox*)GetDlgItem(IDC_LIST_LEFT))->DeleteString(nIndex);
				}
				else if(LB_ERR == ((CListBox*)GetDlgItem(IDC_LIST_LEFT))->GetCurSel())
				{
					int nIndex = ((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->GetCurSel();
					((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->DeleteString(nIndex);
				}
				else
					return TRUE;
			}

		default:			
			break;			
		}
	}


	return CDialog::PreTranslateMessage(pMsg);
}

void CListBoxDlg::OnBnClickedButtonRight()
{
	
		if(LB_ERR == ((CListBox*)GetDlgItem(IDC_LIST_LEFT))->GetCurSel())
		{
			AfxMessageBox(_T(" 왼쪽에서 선택된 목록이 없습니다. "));
			return;
		}

		int nIndex = ((CListBox*)GetDlgItem(IDC_LIST_LEFT))->GetCurSel();
		
		CString strTemp = _T("");
		((CListBox*)GetDlgItem(IDC_LIST_LEFT))->GetText(nIndex,strTemp);
		((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->AddString(strTemp);
		((CListBox*)GetDlgItem(IDC_LIST_LEFT))->DeleteString(nIndex); // 항목 삭제
		
		((CListBox*)GetDlgItem(IDC_LIST_LEFT))->SetCurSel(nIndex); // 삭제된 자리로 SetCurSel.
		int ListCount = ((CListBox*)GetDlgItem(IDC_LIST_LEFT))->GetCount(); // 리스트 갯수
		
		if( nIndex == ListCount) // 삭제하고 나서 리스트가 없을경우 위로 SetCurSel
		{
			((CListBox*)GetDlgItem(IDC_LIST_LEFT))->SetCurSel(nIndex-1); 
		}
}

void CListBoxDlg::OnBnClickedButtonLeft()
{
		if(LB_ERR == ((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->GetCurSel())
		{
			AfxMessageBox(_T(" 오른쪽에서 선택된 목록이 없습니다. "));
			return;
		}

		int nIndex = ((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->GetCurSel();
		CString strTemp = _T("");
		((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->GetText(nIndex,strTemp);
		((CListBox*)GetDlgItem(IDC_LIST_LEFT))->AddString(strTemp);
		((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->DeleteString(nIndex); // 인덱스 번호에 있는 스트링 삭제

		((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->SetCurSel(nIndex); // 삭제된 자리로 SetCurSel.
		int ListCount = ((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->GetCount();
		
		if( nIndex == ListCount)
		{
			((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->SetCurSel(nIndex-1);
		}
}

void CListBoxDlg::OnLbnSetfocusListRight()
{
	((CListBox*)GetDlgItem(IDC_LIST_LEFT))->SetCurSel(-1); // 오른쪽 리스트 클릭시 왼쪽 리스트 커서(파란색마킹) 제거
}

void CListBoxDlg::OnLbnSetfocusListLeft()
{	
	((CListBox*)GetDlgItem(IDC_LIST_RIGHT))->SetCurSel(-1);
}
